{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","href","title","aboutText","placeholder","defaultProps","TextForm","text","setText","read","heading","rows","value","onChange","event","word_count","char_count","tempText","target","splitTemp","split","length","at","document","getElementById","innerHTML","newText","toUpperCase","toLowerCase","i","n","charAt","console","log","select","navigator","clipboard","writeText","join","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.901539ad.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nexport default function About() {\n    const [myStyle, setMyStyle] = useState({\n        color: 'black',\n        backgroundColor: 'white',\n\t})\n\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n\n    const toggleStyle = () =>\n    {\n        if (myStyle.color === 'black')\n        {\n            setMyStyle(\n                {\n                    color: 'white',\n                    backgroundColor: 'black',\n\t\t\t\t\t// width: '100v',\n                    // border: '1px solid white'\n                }\n            )\n            setBtnText(\"Enable Light Mode\")\n        }\n        else\n        {\n          setMyStyle(\n            {\n                color: 'black',\n                backgroundColor: 'white'\n            }\n          )\n          setBtnText(\"Enable Dark Mode\")\n        }\n    }\n\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h1 className=\"my-3\">About Us</h1>\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}\n            >\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n            style={myStyle}\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n              style={myStyle}\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n            style={myStyle}\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the second item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n              style={myStyle}\n            >\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n            style={myStyle}\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the third item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container my-2\">\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-dark my-3\">\n          {btnText}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Navbar = (props) => {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">\r\n                  {props.aboutText}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired };\r\n\r\nNavbar.defaultProps = { title: \"Set Your Title Of Navbar Here...\", aboutText: \"About Text Here\"};\r\n","import React, {useState} from 'react'\n// import PropTypes from \"prop-types\";\n\n\nexport const TextForm = (props) => {\n    const handleUpClick = () => {\n        // console.log(\"Uppercase was clicked\" + text);\n        let newText = text.toUpperCase();\n        setText(newText)\n    }\n    const handleDownClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText)\n    }\n\n    \n    const handleInverseClick = (event) => {\n        let newText = \"\";\n        let i = 0;\n        while (i < text.length)\n        {\n            let n = text.charAt(i);\n            if (n === n.toUpperCase())\n            {\n                n = n.toLowerCase();\n            }\n            else\n            {\n                n = n.toUpperCase();\n            }\n            newText += n;\n            i += 1;\n        }\n        setText(newText);\n    }\n\n    const handleClearClick = (event) => {\n        let newText = \"\";\n        read = 0;\n        // word_count = 0;\n        // char_count = 0;\n        document.getElementById(\"read\").innerHTML = read;\n        document.getElementById(\"word_count\").innerHTML = 0;\n        document.getElementById(\"char_count\").innerHTML = 0;\n        setText(newText);\n    }\n\n    const handleCopy = () =>\n    {\n        console.log(\"I'm Copy.\");\n        let tempText = document.getElementById(\"myBox\");\n        tempText.select();\n        navigator.clipboard.writeText(tempText.value);\n    }\n\n    const handleExtraSpaces = () =>\n    {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n    }\n\n    const handleOnChange = (event, read, word_count, char_count) => {\n        var tempText = event.target.value;\n        var splitTemp = tempText.split(\" \");\n        setText(tempText);\n        read = 0.008 * tempText.split(\" \").length;\n        char_count = tempText.length;\n        word_count = tempText.split(\" \").length;\n        if (splitTemp.at(0) === \"\")\n        {\n            read = 0;\n            word_count = 0;\n            char_count = 0;\n        }\n        if (splitTemp.at(splitTemp.length-1) === \"\")\n        {\n            word_count = tempText.split(\" \").length-1;\n        }\n        document.getElementById(\"read\").innerHTML = read;\n        document.getElementById(\"word_count\").innerHTML = word_count;\n        document.getElementById(\"char_count\").innerHTML = char_count;\n    }\n\n    const [text, setText] = useState('');\n    let read = 0;\n    let word_count = 0;\n    let char_count = 0;\n    return (\n        <>\n            <div className=\"container\">\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\n                </div>\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>Convert to Lowercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleInverseClick}>Convert to Inversecase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n                <button className=\"btn btn-danger mx-2\" onClick={handleClearClick}>Clear</button>\n            </div>\n            <div className=\"container my-3\">\n                <h2>Your Text Summary</h2>\n                <p><span id = \"word_count\">{word_count}</span> words and <span id =\"char_count\">{char_count}</span> characters</p>\n                <p><span id = \"read\">{read}</span> Minute read</p>\n                <h3>Preview</h3>\n                <p>{text}</p>\n            </div>\n        </>\n    )\n}\n","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport About from './components/About';\r\nimport {Navbar} from './components/Navbar';\r\nimport {TextForm} from './components/TextForm';\r\n\r\nfunction App() {\r\n  // Entire thing written inside return is called JSX. -Nothing but HTML hiding behind JS.\r\n  // <> </> only one tag can be returned. you can use JSX fragment\r\n  return (\r\n    <>\r\n    <Navbar title=\"TextUtils\" aboutText=\"About\"/>\r\n    <div className=\"container my-3\">\r\n      <TextForm heading=\"Enter text to analyze\"/>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n      <About />\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}