{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","style","backgroundColor","color","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","read","heading","rows","value","onChange","event","word_count","char_count","tempText","target","splitTemp","split","length","at","document","getElementById","innerHTML","newText","toUpperCase","toLowerCase","i","n","charAt","console","log","select","navigator","clipboard","writeText","join","App","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0ef3b3f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Navbar = (props) => {\r\n  return (\r\n    <div>\r\n      {/* <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light' ? '#06295c' : 'white'} bg-${props.mode === 'light' ? '#06295c' : 'dark'}`}> */}\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light' ? 'light' : 'dark'}`} style={{backgroundColor: props.mode === 'dark' ? '#04152e' : '#b7d2fa', color: props.mode === 'light' ? 'black' : 'white'}}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">\r\n                  {props.aboutText}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            {/* #06295c */}\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? '#06295c' : 'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired };\r\n\r\nNavbar.defaultProps = { title: \"Set Your Title Of Navbar Here...\", aboutText: \"About Text Here\"};\r\n","import React, {useState} from 'react'\r\n// import PropTypes from \"prop-types\";\r\n\r\n\r\nexport const TextForm = (props) => {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n    const handleDownClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n\r\n    \r\n    const handleInverseClick = (event) => {\r\n        let newText = \"\";\r\n        let i = 0;\r\n        while (i < text.length)\r\n        {\r\n            let n = text.charAt(i);\r\n            if (n === n.toUpperCase())\r\n            {\r\n                n = n.toLowerCase();\r\n            }\r\n            else\r\n            {\r\n                n = n.toUpperCase();\r\n            }\r\n            newText += n;\r\n            i += 1;\r\n        }\r\n        setText(newText);\r\n    }\r\n\r\n    const handleClearClick = (event) => {\r\n        let newText = \"\";\r\n        read = 0;\r\n        // word_count = 0;\r\n        // char_count = 0;\r\n        document.getElementById(\"read\").innerHTML = read;\r\n        document.getElementById(\"word_count\").innerHTML = 0;\r\n        document.getElementById(\"char_count\").innerHTML = 0;\r\n        setText(newText);\r\n    }\r\n\r\n    const handleCopy = () =>\r\n    {\r\n        console.log(\"I'm Copy.\");\r\n        let tempText = document.getElementById(\"myBox\");\r\n        tempText.select();\r\n        navigator.clipboard.writeText(tempText.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () =>\r\n    {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n    const handleOnChange = (event, read, word_count, char_count) => {\r\n        var tempText = event.target.value;\r\n        var splitTemp = tempText.split(\" \");\r\n        setText(tempText);\r\n        read = 0.008 * tempText.split(\" \").length;\r\n        char_count = tempText.length;\r\n        word_count = tempText.split(\" \").length;\r\n        if (splitTemp.at(0) === \"\")\r\n        {\r\n            read = 0;\r\n            word_count = 0;\r\n            char_count = 0;\r\n        }\r\n        if (splitTemp.at(splitTemp.length-1) === \"\")\r\n        {\r\n            word_count = tempText.split(\" \").length-1;\r\n        }\r\n        document.getElementById(\"read\").innerHTML = read;\r\n        document.getElementById(\"word_count\").innerHTML = word_count;\r\n        document.getElementById(\"char_count\").innerHTML = char_count;\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    let read = 0;\r\n    let word_count = 0;\r\n    let char_count = 0;\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : '#06295c'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark' ? '#06295c' : 'white', color: props.mode === 'dark' ? 'white' : '#06295c'}}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleInverseClick}>Convert to Inversecase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-danger mx-2\" onClick={handleClearClick}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'dark' ? 'white' : '#06295c'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p><span id = \"word_count\">{word_count}</span> words and <span id =\"char_count\">{char_count}</span> characters</p>\r\n                <p><span id = \"read\">{read}</span> Minute read</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0 ? text: \"Enter something above to preview it here ...\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\n// import About from './components/About';\r\nimport {Navbar} from './components/Navbar';\r\nimport {TextForm} from './components/TextForm';\r\nimport React, { useState } from 'react'\r\n\r\nfunction App() {\r\n  // Entire thing written inside return is called JSX. -Nothing but HTML hiding behind JS.\r\n  // <> </> only one tag can be returned. you can use JSX fragment\r\n  const [mode, setMode] = useState('light'); // whether darkmode is enabled or not.\r\n  const toggleMode = () =>\r\n  {\r\n      if (mode === 'light')\r\n      {\r\n          setMode('dark')\r\n          document.body.style.backgroundColor = '#06295c'\r\n      }\r\n      else\r\n      {\r\n          setMode('light')\r\n          document.body.style.backgroundColor = 'white'\r\n      }\r\n  }\r\n  return (\r\n    <>\r\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\r\n    <div className=\"container my-3\">\r\n      <TextForm heading=\"Enter text to analyze\" mode={mode}/>\r\n    </div>\r\n    {/* <div className=\"container my-3\">\r\n      <About />\r\n    </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}